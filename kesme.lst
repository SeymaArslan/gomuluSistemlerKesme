CCS PCM C Compiler, Version 4.140, 8843               26-Nis-14 21:44

               Filename:   C:\Users\Þevki\Desktop\fbgrup\kesme.lst

               ROM used:   408 words (5%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           28 (8%) worst case
               Stack:     6 worst case (1 in main + 5 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   16E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   0D4
....................  //Buton a basýldýðýnda 1 saniyelik dýþ kesme iþlemi yapýlýyor. ve LCD yardýmý ile ekrana kesme oluþturuldu mesajý gönderiyor... 
.................... #include<16f877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses XT,NOWDT 
.................... #use delay(clock=1M) 
*
0037:  MOVLW  2A
0038:  MOVWF  04
0039:  BCF    03.7
003A:  MOVF   00,W
003B:  BTFSC  03.2
003C:  GOTO   043
003D:  MOVLW  52
003E:  MOVWF  77
003F:  DECFSZ 77,F
0040:  GOTO   03F
0041:  DECFSZ 00,F
0042:  GOTO   03D
0043:  RETURN
.................... #include <lcd.c>                            //2 satir lcd kütüphanesi eklendi 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
005B:  MOVLW  0F
005C:  BSF    03.5
005D:  ANDWF  08,W
005E:  IORLW  F0
005F:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0060:  BCF    03.5
0061:  BSF    08.2
....................    delay_cycles(1); 
0062:  NOP
....................    lcd_output_enable(1); 
0063:  BSF    08.0
....................    delay_cycles(1); 
0064:  NOP
....................    high = lcd_read_nibble(); 
0065:  CALL   04F
0066:  MOVF   78,W
0067:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
0068:  BCF    08.0
....................    delay_cycles(1); 
0069:  NOP
....................    lcd_output_enable(1); 
006A:  BSF    08.0
....................    delay_us(1); 
....................    low = lcd_read_nibble(); 
006B:  CALL   04F
006C:  MOVF   78,W
006D:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
006E:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
006F:  MOVLW  0F
0070:  BSF    03.5
0071:  ANDWF  08,W
0072:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0073:  BCF    03.5
0074:  SWAPF  35,W
0075:  MOVWF  77
0076:  MOVLW  F0
0077:  ANDWF  77,F
0078:  MOVF   77,W
0079:  IORWF  34,W
007A:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
004F:  MOVF   08,W
0050:  MOVWF  77
0051:  SWAPF  08,W
0052:  ANDLW  0F
0053:  MOVWF  78
....................   #endif 
.................... } 
0054:  RETURN
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0044:  SWAPF  35,W
0045:  ANDLW  F0
0046:  MOVWF  77
0047:  MOVLW  0F
0048:  ANDWF  08,W
0049:  IORWF  77,W
004A:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
004B:  NOP
....................    lcd_output_enable(1); 
004C:  BSF    08.0
....................    delay_us(2); 
....................    lcd_output_enable(0); 
004D:  BCF    08.0
.................... } 
004E:  RETURN
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0055:  BSF    03.5
0056:  BCF    08.0
....................    lcd_rs_tris(); 
0057:  BCF    08.1
....................    lcd_rw_tris(); 
0058:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0059:  BCF    03.5
005A:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
007B:  MOVF   78,W
007C:  MOVWF  34
007D:  BTFSC  34.7
007E:  GOTO   05B
....................    lcd_output_rs(address); 
007F:  BTFSS  32.0
0080:  BCF    08.1
0081:  BTFSC  32.0
0082:  BSF    08.1
....................    delay_cycles(1); 
0083:  NOP
....................    lcd_output_rw(0); 
0084:  BCF    08.2
....................    delay_cycles(1); 
0085:  NOP
....................    lcd_output_enable(0); 
0086:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0087:  SWAPF  33,W
0088:  MOVWF  34
0089:  MOVLW  0F
008A:  ANDWF  34,F
008B:  MOVF   34,W
008C:  MOVWF  35
008D:  CALL   044
....................    lcd_send_nibble(n & 0xf); 
008E:  MOVF   33,W
008F:  ANDLW  0F
0090:  MOVWF  34
0091:  MOVWF  35
0092:  CALL   044
.................... } 
0093:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
*
00D4:  MOVLW  0F
00D5:  BSF    03.5
00D6:  ANDWF  08,W
00D7:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00D8:  BCF    08.0
....................    lcd_rs_tris(); 
00D9:  BCF    08.1
....................    lcd_rw_tris(); 
00DA:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00DB:  BCF    03.5
00DC:  BCF    08.1
....................    lcd_output_rw(0); 
00DD:  BCF    08.2
....................    lcd_output_enable(0); 
00DE:  BCF    08.0
....................      
....................    delay_ms(15); 
00DF:  MOVLW  0F
00E0:  MOVWF  2A
00E1:  CALL   037
....................    for(i=1;i<=3;++i) 
00E2:  MOVLW  01
00E3:  MOVWF  29
00E4:  MOVF   29,W
00E5:  SUBLW  03
00E6:  BTFSS  03.0
00E7:  GOTO   0F0
....................    { 
....................        lcd_send_nibble(3); 
00E8:  MOVLW  03
00E9:  MOVWF  35
00EA:  CALL   044
....................        delay_ms(5); 
00EB:  MOVLW  05
00EC:  MOVWF  2A
00ED:  CALL   037
....................    } 
00EE:  INCF   29,F
00EF:  GOTO   0E4
....................     
....................    lcd_send_nibble(2); 
00F0:  MOVLW  02
00F1:  MOVWF  35
00F2:  CALL   044
....................    delay_ms(5); 
00F3:  MOVLW  05
00F4:  MOVWF  2A
00F5:  CALL   037
....................    for(i=0;i<=3;++i) 
00F6:  CLRF   29
00F7:  MOVF   29,W
00F8:  SUBLW  03
00F9:  BTFSS  03.0
00FA:  GOTO   104
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00FB:  MOVF   29,W
00FC:  CALL   02F
00FD:  MOVWF  2A
00FE:  CLRF   32
00FF:  MOVF   2A,W
0100:  MOVWF  33
0101:  CALL   055
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0102:  INCF   29,F
0103:  GOTO   0F7
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0094:  DECFSZ 2F,W
0095:  GOTO   097
0096:  GOTO   09A
....................       address=LCD_LINE_TWO; 
0097:  MOVLW  40
0098:  MOVWF  30
....................    else 
0099:  GOTO   09B
....................       address=0; 
009A:  CLRF   30
....................       
....................    address+=x-1; 
009B:  MOVLW  01
009C:  SUBWF  2E,W
009D:  ADDWF  30,F
....................    lcd_send_byte(0,0x80|address); 
009E:  MOVF   30,W
009F:  IORLW  80
00A0:  MOVWF  31
00A1:  CLRF   32
00A2:  MOVF   31,W
00A3:  MOVWF  33
00A4:  CALL   055
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
00A5:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
00A6:  MOVF   2D,W
00A7:  XORLW  07
00A8:  BTFSC  03.2
00A9:  GOTO   0B4
00AA:  XORLW  0B
00AB:  BTFSC  03.2
00AC:  GOTO   0B9
00AD:  XORLW  06
00AE:  BTFSC  03.2
00AF:  GOTO   0C3
00B0:  XORLW  02
00B1:  BTFSC  03.2
00B2:  GOTO   0C9
00B3:  GOTO   0CE
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00B4:  MOVLW  01
00B5:  MOVWF  2E
00B6:  MOVWF  2F
00B7:  CALL   094
00B8:  GOTO   0D3
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00B9:  CLRF   32
00BA:  MOVLW  01
00BB:  MOVWF  33
00BC:  CALL   055
....................                      delay_ms(2); 
00BD:  MOVLW  A6
00BE:  MOVWF  77
00BF:  DECFSZ 77,F
00C0:  GOTO   0BF
00C1:  NOP
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00C2:  GOTO   0D3
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00C3:  MOVLW  01
00C4:  MOVWF  2E
00C5:  MOVLW  02
00C6:  MOVWF  2F
00C7:  CALL   094
00C8:  GOTO   0D3
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00C9:  CLRF   32
00CA:  MOVLW  10
00CB:  MOVWF  33
00CC:  CALL   055
00CD:  GOTO   0D3
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00CE:  MOVLW  01
00CF:  MOVWF  32
00D0:  MOVF   2D,W
00D1:  MOVWF  33
00D2:  CALL   055
....................      #endif 
....................    } 
.................... } 
00D3:  RETURN
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #int_ext                                    //Kesme olduðunda hemen alttaki satýrdan itibaren devam eder. 
.................... void ext_kesmesi() { 
....................       lcd_init();                            //LCD kullanýmý için gerekli 
....................       lcd_putc('\f');                        //bu þekilde baþlangýca cursor alýndý 
*
0104:  MOVLW  0C
0105:  MOVWF  2D
0106:  CALL   0A6
....................       printf(lcd_putc,"kesme olustu ..." ); //printf ile lcd ye karakter karakter  
0107:  MOVLW  65
0108:  BSF    03.6
0109:  MOVWF  0D
010A:  MOVLW  01
010B:  MOVWF  0F
....................                                              //verilen deðer gönderilir  
....................       delay_ms(1000); 
*
0157:  MOVLW  04
0158:  MOVWF  29
0159:  MOVLW  FA
015A:  MOVWF  2A
015B:  CALL   037
015C:  DECFSZ 29,F
015D:  GOTO   159
....................       lcd_putc('\f');                        //bu þekilde baþlangýca cursor alýndý 
015E:  MOVLW  0C
015F:  MOVWF  2D
0160:  CALL   0A6
....................        } 
0161:  BCF    0B.1
0162:  BCF    0A.3
0163:  BCF    0A.4
0164:  GOTO   01B
.................... void main() { 
*
016E:  CLRF   04
016F:  BCF    03.7
0170:  MOVLW  1F
0171:  ANDWF  03,F
0172:  BSF    03.5
0173:  BSF    1F.0
0174:  BSF    1F.1
0175:  BSF    1F.2
0176:  BCF    1F.3
....................      enable_interrupts(INT_EXT);     //Dýs kesmeyi etkin hale getirir. 
0177:  BCF    03.5
0178:  BSF    0B.4
....................      enable_interrupts(GLOBAL);      //Tüm kesme iþlemlerine izin verir. 
0179:  MOVLW  C0
017A:  IORWF  0B,F
....................        while(1) {                    //Kesme yokken sonsuz döngü içerisinde LED yanýp söner. Kesme dýþýndaki esas görev. 
....................        output_high(PIN_D3);   
017B:  BSF    03.5
017C:  BCF    08.3
017D:  BCF    03.5
017E:  BSF    08.3
017F:  CLRF   27
0180:  BTFSC  0B.7
0181:  BSF    27.7
0182:  BCF    0B.7
....................        delay_ms(100); 
0183:  MOVLW  64
0184:  MOVWF  2A
0185:  CALL   037
0186:  BTFSC  27.7
0187:  BSF    0B.7
....................        output_low(PIN_D3); 
0188:  BSF    03.5
0189:  BCF    08.3
018A:  BCF    03.5
018B:  BCF    08.3
018C:  CLRF   27
018D:  BTFSC  0B.7
018E:  BSF    27.7
018F:  BCF    0B.7
....................        delay_ms(100); 
0190:  MOVLW  64
0191:  MOVWF  2A
0192:  CALL   037
0193:  BTFSC  27.7
0194:  BSF    0B.7
....................      } 
0195:  GOTO   17B
....................       
....................      while(1); 
0196:  GOTO   196
....................  
.................... } 
0197:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
